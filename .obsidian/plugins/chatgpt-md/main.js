/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var X=Object.defineProperty;var ve=Object.getOwnPropertyDescriptor;var $e=Object.getOwnPropertyNames;var be=Object.prototype.hasOwnProperty;var Ge=(o,e)=>{for(var r in e)X(o,r,{get:e[r],enumerable:!0})},ke=(o,e,r,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of $e(e))!be.call(o,n)&&n!==r&&X(o,n,{get:()=>e[n],enumerable:!(t=ve(e,n))||t.enumerable});return o};var He=o=>ke(X({},"__esModule",{value:!0}),o);var Ye={};Ge(Ye,{default:()=>q});module.exports=He(Ye);var C=require("obsidian");var L=require("obsidian");var T="ollama",u="openai",ne="add-comment-block",se="add-hr",ae="call-chatgpt-api",oe="stop-streaming",ie="move-to-chat",le="infer-title",ce="choose-chat-template",me="clear-chat",he=`I am sorry. There was an authorization issue with the external API (Status 401).
Please check your API key in the settings`,ge=`I am sorry. There was an issue reaching the network.
Please check your network connection.`,pe="I am sorry, your request looks wrong. Please check your URL or model name in the settings or frontmatter.",G="I am sorry, I could not answer your request because of an error, here is what went wrong:",Z="chatFolder",de="chatTemplateFolder",m=`

`,x=/---[\s\S]*?---/g,ue=/\[\[([^\][]+)\]\]/g,fe=/\[([^\]]+)\]\(([^()]+)\)/g,Ee=`=begin-chatgpt-md-comment${m}`,Ce="=end-chatgpt-md-comment",Te=0,Q=6,_e=4,D="YYYYMMDDhhmmss",Me="Failed to fetch",ee="__chatgpt_plugin",F=`<hr class="${ee}">`,_="role::",w="assistant",k="developer",Ae="system",g="user";var H=o=>{let r=(o.match(/```/g)||[]).length%2!==0;return r&&console.log("[ChatGPT MD] Unclosed code block detected"),r},Ve=o=>{let e=o.trim().toLowerCase(),t=[g,w,k].find(n=>e.includes(n));if(t)return t;throw new Error(`Failed to extract role from input: "${o}"`)},Se=o=>{try{if(!o.includes(_))return{role:g,content:o};let[e,...r]=o.split(_)[1].split(`
`);return{role:Ve(e),content:r.join(`
`).trim()}}catch(e){throw new Error(`Failed to extract role and message: ${e}`)}},we=o=>{try{let e=/=begin-chatgpt-md-comment[\s\S]*?=end-chatgpt-md-comment/g;return o.replace(e,"")}catch(e){throw new Error("Error removing comments from messages"+e)}},Ue=o=>{let e=o.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&").replace("YYYY","\\d{4}").replace("MM","\\d{2}").replace("DD","\\d{2}").replace("hh","\\d{2}").replace("mm","\\d{2}").replace("ss","\\d{2}");return new RegExp(`^${e}$`)},Ie=(o="",e)=>(o==null?void 0:o.length)==e.length&&Ue(e).test(o),te=o=>o===0?"":o>6?"#".repeat(6)+" ":"#".repeat(o)+" ",N=(o,e,r)=>`${m}${F}${m}${o}${_}${e}${r?`<span style="font-size: small;"> (${r})</span>`:""}${m}`,ye=o=>{let r=o.replace(/^---\n/,"").replace(/\n---$/,"").split(`
`),t={};for(let n of r){if(!n.trim())continue;let[s,...a]=n.split(":"),i=a.join(":").trim();i.startsWith("[")&&i.endsWith("]")?t[s.trim()]=i.slice(1,-1).split(",").map(l=>{let c=l.trim();return c.startsWith("'")&&c.endsWith("'")?c.slice(1,-1):c}):i==="true"?t[s.trim()]=!0:i==="false"?t[s.trim()]=!1:i==="null"?t[s.trim()]=null:isNaN(Number(i))?t[s.trim()]=i:t[s.trim()]=Number(i)}return t},Oe=o=>o.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),Pe=o=>o?o.split(F):[],De=o=>(o=o&&o.replace(x,"").trim(),o);var V=class{constructor(){this.abortController=null;this.stopStreaming=()=>{if(L.Platform.isMobile){new L.Notice("[ChatGPT MD] Mobile not supported.");return}this.abortController&&(this.abortController.abort(),console.log("[ChatGPT MD] Stream aborted"),this.abortController=null)}}handleEditorTextUpdate(e,r,t){let n=e.posToOffset(t),s=e.cm;s.dispatch(s.state.update({changes:{from:n,to:n,insert:r}}));let a={line:t.line,ch:t.ch+r.length};return e.setCursor(a),a}insertAssistantHeader(e,r,t){let n=N(r,w,t);e.replaceRange(n,e.getCursor());let s=e.getCursor(),a={line:s.line,ch:s.ch+n.length};return e.setCursor(a),a}finalizeText(e,r,t,n){let s=H(r)?r+"\n```":r,a=e.getCursor();e.replaceRange(s,{line:t.line,ch:t.ch},a);let i={line:t.line,ch:t.ch+s.length};return e.setCursor(i),n?new L.Notice("[ChatGPT MD] Text pasted at cursor may leave artifacts. Please remove them manually. ChatGPT MD cannot safely remove text when pasting at cursor."):e.replaceRange("",i,{line:1/0,ch:1/0}),s}async stream(e,r,t,n,s,a,i){let l="",c;try{console.log('[ChatGPT MD] "stream"',t),c=this.insertAssistantHeader(e,i,t.model),this.abortController=new AbortController;let h=await fetch(r,{headers:n,method:"POST",body:JSON.stringify(t),signal:this.abortController.signal});if(h.status==401)return this.finalizeText(e,he,c,a);if(h.status==404)return this.finalizeText(e,`${pe}:${m}Model: ${t.model}${m}URL: ${r}`,c,a);if(!h.ok)throw new Error("Network response was not ok");if(!h.body)throw new Error("The response was empty");let I=h.body.getReader(),y=new TextDecoder;for(;;){let{done:O,value:$}=await I.read();if(O)break;let Fe=y.decode($,{stream:!0}).split(`
`);for(let b of Fe)if(b.trim()){if(s==u){if(!b.startsWith("data: "))continue;let S=b.slice(6);if(S==="[DONE]")return this.finalizeText(e,l,c,a);try{let R=JSON.parse(S).choices[0].delta.content;if(R){let Le=e.getCursor();this.handleEditorTextUpdate(e,R,Le),l+=R}}catch(P){console.error("Error parsing OpenAI JSON:",P)}}else if(s==T)try{let S=JSON.parse(b);if(S.done)return this.finalizeText(e,l,c,a);{let P=S.message.content;if(P){let R=e.getCursor();this.handleEditorTextUpdate(e,P,R),l+=P}}}catch(S){console.error("Error parsing Ollama JSON:",S)}}}return l}catch(h){return h.name==="AbortError"?(console.log("[ChatGPT MD] Stream aborted"),this.finalizeText(e,"Stream aborted",c,a)):h.message==Me?this.finalizeText(e,ge,c,a):(console.error("Stream error:",h),this.finalizeText(e,`${G}${m}${h}`,c,a))}finally{this.abortController=null}}};var d=require("obsidian");var f=require("obsidian");var U=class{constructor(e){this.streamManager=e;this.inferTitleFromMessages=async(e,r,t)=>{try{if(r.length<2)return new f.Notice("Not enough messages to infer title. Minimum 2 messages."),"";let n=`Infer title from the summary of the content of these messages. The title **cannot** contain any of the following characters: colon, back slash or forward slash. Just return the title. Write the title in ${t.inferTitleLanguage}. 
Messages:${m}${JSON.stringify(r)}`,s={...p,...t};return await this.callNonStreamingAPI(t.apiKey,[{role:g,content:n}],s)}catch(n){throw new f.Notice("[ChatGPT MD] Error inferring title from messages"),new Error("[ChatGPT MD] Error inferring title from messages"+n)}}}async callAIAPI(e,r={},t,n,s,a){let i={...p,...r};return r.stream&&n?this.callStreamingAPI(a,e,i,n,t,s):this.callNonStreamingAPI(a,e,i)}async inferTitle(e,r,t,n){if(!e.file)throw new Error("No active file found");console.log("[ChatGPT MD] auto inferring title from messages");let s=await this.inferTitleFromMessages(r.apiKey,t,r);s?(console.log(`[ChatGPT MD] automatically inferred title: ${s}. Changing file name...`),await n.writeInferredTitle(e,s)):new f.Notice("[ChatGPT MD] Could not infer title",5e3)}handleAPIError(e,r,t){throw e instanceof Object?e.error?(new f.Notice(`${t} :: ${e.error.message}`),new Error(JSON.stringify(e.error))):r.url!==p.url?(new f.Notice(`${t} calling specified url: ${r.url}`),new Error(`${t} calling specified url: ${r.url}`)):(new f.Notice(`${t} :: ${JSON.stringify(e)}`),new Error(JSON.stringify(e))):(new f.Notice(`${t} calling ${r.model}, see console for details`),new Error(`${t} see error: ${e}`))}createPayload(e,r){return{model:e.model,messages:r,max_completion_tokens:e.max_tokens,temperature:e.temperature,top_p:e.top_p,presence_penalty:e.presence_penalty,frequency_penalty:e.frequency_penalty,stream:e.stream,stop:e.stop,n:e.n}}async callStreamingAPI(e,r,t,n,s,a){try{let i=this.createPayload(t,r);return{fullstr:await this.streamManager.stream(n,t.url,i,{"Content-Type":"application/json",Authorization:`Bearer ${e}`},t.aiService,a,s),mode:"streaming"}}catch(i){return this.handleAPIError(i,t,"[ChatGPT MD] Stream = True Error"),{fullstr:`${G}${m}${i}`,mode:"streaming"}}}async callNonStreamingAPI(e,r,t){try{console.log('[ChatGPT MD] "no stream"',t),t.stream=!1;let n=this.createPayload(t,r),a=(await(0,f.requestUrl)({url:t.url,method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},contentType:"application/json",body:JSON.stringify(n),throw:!1})).json;if(a!=null&&a.error)throw new f.Notice(`[ChatGPT MD] Stream = False Error :: ${a.error.message}`),new Error(JSON.stringify(a.error));return a.choices[0].message.content}catch(n){this.handleAPIError(n,t,"[ChatGPT MD] Error")}}},p={aiService:u,frequency_penalty:.5,max_tokens:300,model:"gpt-4o-mini",n:1,presence_penalty:.5,stop:null,stream:!0,system_commands:null,tags:[],temperature:.3,title:"Untitled",top_p:1,url:"https://api.openai.com/v1/chat/completions"};var Y=`---
system_commands: ['I am a helpful assistant.']
temperature: ${p.temperature}
top_p: ${p.top_p}
max_tokens: ${p.max_tokens}
presence_penalty: ${p.presence_penalty}
frequency_penalty: ${p.frequency_penalty}
stream: ${p.stream}
stop: ${p.stop}
n: ${p.n}
model: ${p.model}
---`,Ne={apiKey:"default",defaultChatFrontmatter:Y,stream:!0,chatTemplateFolder:"ChatGPT_MD/templates",chatFolder:"ChatGPT_MD/chats",generateAtCursor:!1,autoInferTitle:!1,dateFormat:D,headingLevel:0,inferTitleLanguage:"English"};var B=class extends d.PluginSettingTab{constructor(e,r){super(e,r),this.plugin=r}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Settings for ChatGPT MD: Keep tokens in mind! You can see if your text is longer than the token limit (4096) here:"}),e.createEl("a",{text:"https://platform.openai.com/tokenizer",href:"https://platform.openai.com/tokenizer"}),new d.Setting(e).setName("OpenAI API Key").setDesc("API Key for OpenAI").addText(r=>r.setPlaceholder("some-api-key").setValue(this.plugin.settings.apiKey).onChange(async t=>{this.plugin.settings.apiKey=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Default Chat Frontmatter").setDesc("Default frontmatter for new chat files. You can change/use all of the settings exposed by the OpenAI API here: https://platform.openai.com/docs/api-reference/chat/create").addTextArea(r=>r.setPlaceholder(Y).setValue(this.plugin.settings.defaultChatFrontmatter||Y).onChange(async t=>{this.plugin.settings.defaultChatFrontmatter=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Stream").setDesc("Stream responses from OpenAI").addToggle(r=>r.setValue(this.plugin.settings.stream).onChange(async t=>{this.plugin.settings.stream=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Chat Folder").setDesc("Path to folder for chat files").addText(r=>r.setValue(this.plugin.settings.chatFolder).onChange(async t=>{this.plugin.settings.chatFolder=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Chat Template Folder").setDesc("Path to folder for chat file templates").addText(r=>r.setPlaceholder("chat-templates").setValue(this.plugin.settings.chatTemplateFolder).onChange(async t=>{this.plugin.settings.chatTemplateFolder=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Generate at Cursor").setDesc("Generate text at cursor instead of end of file").addToggle(r=>r.setValue(this.plugin.settings.generateAtCursor).onChange(async t=>{this.plugin.settings.generateAtCursor=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Automatically Infer Title").setDesc("Automatically infer title after 4 messages have been exchanged").addToggle(r=>r.setValue(this.plugin.settings.autoInferTitle).onChange(async t=>{this.plugin.settings.autoInferTitle=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Date Format").setDesc("Date format for chat files. Valid date blocks are: YYYY, MM, DD, hh, mm, ss").addText(r=>r.setPlaceholder(D).setValue(this.plugin.settings.dateFormat).onChange(async t=>{this.plugin.settings.dateFormat=t,await this.plugin.saveSettings()})),new d.Setting(e).setName("Heading Level").setDesc(`Heading level for messages (example for heading level 2: '## ${_}${g}'). Valid heading levels are 0, 1, 2, 3, 4, 5, 6`).addText(r=>r.setValue(this.plugin.settings.headingLevel.toString()).onChange(async t=>{this.plugin.settings.headingLevel=parseInt(t),await this.plugin.saveSettings()})),new d.Setting(e).setName("Infer title language").setDesc("Language to use for title inference.").addDropdown(r=>{r.addOptions({English:"English",Japanese:"Japanese",Spanish:"Spanish",French:"French",German:"German",Chinese:"Chinese",Korean:"Korean",Italian:"Italian",Russian:"Russian"}),r.setValue(this.plugin.settings.inferTitleLanguage),r.onChange(async t=>{this.plugin.settings.inferTitleLanguage=t,await this.plugin.saveSettings()})})}};var E=require("obsidian");var v=require("obsidian"),K=class extends v.Modal{constructor(e,r,t){super(e),this.folderName=r,this.folderPath=t,this.result=!1,this.modalPromise=new Promise(n=>{this.resolveModalPromise=n})}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:`[ChatGPT MD] No ${this.folderName} folder found.`}),e.createEl("p",{text:`If you choose "Yes, Create", the plugin will automatically create a folder at: ${this.folderPath}. You can change this path in the plugin settings.`}),new v.Setting(e).addButton(r=>r.setButtonText("Yes, Create Folder").setTooltip("Create folder").setCta().onClick(()=>{this.result=!0,this.resolveModalPromise(this.result),this.close()})),new v.Setting(e).addButton(r=>r.setButtonText("No, I'll create it myself").setTooltip("Cancel").setCta().onClick(()=>{this.result=!1,this.resolveModalPromise(this.result),this.close()}))}waitForModalValue(){return this.modalPromise}onClose(){let{contentEl:e}=this;e.empty()}};var Re=async(o,e,r)=>{let t=new K(o,e,r);t.open();let n=await t.waitForModalValue();return n?(console.log("[ChatGPT MD] Creating folder"),await o.vault.createFolder(r)):console.log("[ChatGPT MD] Not creating folder"),n};var M=require("obsidian"),W=class extends M.SuggestModal{constructor(e,r,t){super(e),this.settings=r,this.titleDate=t}getFilesInChatFolder(){let e=this.app.vault.getAbstractFileByPath(this.settings.chatTemplateFolder);if(e!=null)return e.children;throw new M.Notice(`Error getting folder: ${this.settings.chatTemplateFolder}`),new Error(`Error getting folder: ${this.settings.chatTemplateFolder}`)}getSuggestions(e){let r=this.getFilesInChatFolder();return e==""?r.map(t=>({title:t.basename,file:t})):r.filter(t=>t.basename.toLowerCase().includes(e.toLowerCase())).map(t=>({title:t.basename,file:t}))}renderSuggestion(e,r){r.createEl("div",{text:e.title})}async onChooseSuggestion(e,r){new M.Notice(`Selected ${e.title}`);let t=await this.app.vault.read(e.file),n=`${this.titleDate} ${e.title}`,s=(0,M.normalizePath)(`${this.settings.chatFolder}/${n}.md`),a=1;for(;await this.app.vault.adapter.exists(s);)s=(0,M.normalizePath)(`${this.settings.chatFolder}/${n} (${a}).md`),a++;try{let i=await this.app.vault.create(s,t);await this.app.workspace.openLinkText(i.basename,"",!0)}catch(i){console.error(i)}}};var A=require("obsidian");var J={model:"gemma2",aiService:T,url:"http://localhost:11434",stream:!0},z=class{constructor(e){this.streamManager=e;this.inferTitleFromMessages=async(e,r)=>{try{if(e.length<2)return new A.Notice("Not enough messages to infer title. Minimum 2 messages."),"";let t=`Infer title from the summary of the content of these messages. The title **cannot** contain any of the following characters: colon, back slash or forward slash. Just return the title. Write the title in ${r.inferTitleLanguage}. 
Messages:${m}${JSON.stringify(e)}`,n={...J,...r};return await this.callNonStreamingAPI([{role:g,content:t}],n)}catch(t){throw new A.Notice("[ChatGPT MD] Error inferring title from messages"),new Error("[ChatGPT MD] Error inferring title from messages"+t)}}}async callAIAPI(e,r={},t,n,s){let a={...J,...r};return r.stream?this.callStreamingAPI(e,a,t,n,s):this.callNonStreamingAPI(e,a)}async inferTitle(e,r,t,n){if(!e.file)throw new Error("No active file found");console.log("[ChatGPT MD] auto inferring title from messages");let s=await this.inferTitleFromMessages(t,r);s?(console.log(`[ChatGPT MD] automatically inferred title: ${s}. Changing file name...`),await n.writeInferredTitle(e,s)):new A.Notice("[ChatGPT MD] Could not infer title",5e3)}async callStreamingAPI(e,r,t="",n,s=!1){try{return{fullstr:await this.streamManager.stream(n,`${r.url}/api/chat`,{model:r.model,messages:e,stream:!0},{"Content-Type":"application/json"},r.aiService,s,t),mode:"streaming"}}catch(a){throw this.handleError(a,r.model),new Error(`Issue calling custom API with streaming enabled:${a}`)}}async callNonStreamingAPI(e,r){try{console.log('[ChatGPT MD] "no stream"',r),r.stream=!1;let t=await(0,A.requestUrl)({url:`${r.url}/api/chat`,method:"POST",headers:{"Content-Type":"application/json"},contentType:"application/json",body:JSON.stringify({model:r.model,messages:e,stream:!1})}),n=JSON.parse(t.text);if(n.error)throw new Error(JSON.stringify(n.error));return n.message.content}catch(t){throw this.handleError(t,r.model),new Error(`Issue calling custom API with non-streaming enabled:${t}`)}}handleError(e,r){e instanceof Object&&e.error?new A.Notice(`[Custom API] Error :: ${e.error.message}`):new A.Notice(`Issue calling ${r}, see console for more details`)}};var re=(o,e)=>{switch(e){case u:return new U(o);case T:return new z(o);default:throw new Error("Unsupported API type")}},xe=(o,e)=>{let r=(o!=null?o:"").trim().toLowerCase(),t=(e!=null?e:"").trim().toLowerCase();if(t.includes("@")){let n=t.split("@")[0];if(["local",T].includes(n))return T;if(n===u)return u}return r.startsWith("http://localhost")||r.startsWith("http://127.0.0.1")?T:u};var j=class{constructor(e){this.app=e;this.getLinkedNoteContent=async e=>{try{let r=this.app.metadataCache.getFirstLinkpathDest(e,"");return r?await this.app.vault.read(r):null}catch(r){return console.error(`Error reading linked note: ${e}`,r),null}}}async writeInferredTitle(e,r){var a,i;let t=e.file;if(!t)throw new Error("No file is currently open");let n=(i=(a=t.parent)==null?void 0:a.path)!=null?i:"/",s=`${n}/${r}.md`;for(let l=1;await this.app.vault.adapter.exists(s);l++)s=`${n}/${r} (${l}).md`;try{await this.app.fileManager.renameFile(t,s)}catch(l){throw new E.Notice("[ChatGPT MD] Error writing inferred title to editor"),console.log("[ChatGPT MD] Error writing inferred title to editor",l),l}}async ensureFolderExists(e,r){return!await this.app.vault.adapter.exists(e)&&!await Re(this.app,r,e)?(new E.Notice(`[ChatGPT MD] No ${r} found. One must be created to use the plugin. Set one in settings and make sure it exists.`),!1):!0}addHorizontalRule(e,r,t){let n=`${m}<hr class="${ee}">${m}${te(t)}${_}${r}${m}`,s=e.getCursor();e.replaceRange(n,s),e.setCursor(s.line+n.split(`
`).length-1,0)}async createNewChatWithHighlightedText(e,r){try{let t=e.getSelection();if(!r.chatFolder||r.chatFolder.trim()===""){new E.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!await this.ensureFolderExists(r.chatFolder,Z))return;let s=`${this.getDate(new Date,r.dateFormat)}.md`,a=`${r.chatFolder}/${s}`,i=await this.app.vault.create(a,t);await this.app.workspace.openLinkText(i.basename,"",!0,{state:{mode:"source"}});let l=this.app.workspace.getActiveViewOfType(E.MarkdownView);if(!l){new E.Notice("No active markdown editor found.");return}l.editor.focus(),this.moveCursorToEnd(l.editor)}catch(t){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",t),new E.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}appendMessage(e,r,t){let n=te(t),s=N(n,w),a=N(n,g);e.replaceRange(`${s}${r}${a}`,e.getCursor())}clearChat(e){let t=e.getValue().match(x);if(t!=null&&t.length){let[n]=t;e.setValue(n),e.setCursor({line:e.lastLine()+1,ch:0})}else e.setValue("")}moveCursorToEnd(e){try{let t={line:e.lastLine()+1,ch:0};e.setCursor(t)}catch(r){throw new Error("Error moving cursor to end of file"+r)}}findLinksInMessage(e){let r=[{regex:ue,fullMatchIndex:0,titleIndex:1},{regex:fe,fullMatchIndex:0,titleIndex:2}],t=[],n=new Set;for(let{regex:s,fullMatchIndex:a,titleIndex:i}of r)for(let l of e.matchAll(s)){let c=l[a],h=l[i];h&&!n.has(h)&&(t.push({link:c,title:h}),n.add(h))}return t}cleanMessagesFromNote(e){return Pe(De(e.getValue())).map(we)}async getMessagesFromEditor(e,r){let t=this.cleanMessagesFromNote(e);t=await Promise.all(t.map(async a=>{let i=this.findLinksInMessage(a);for(let l of i)try{let c=await this.getLinkedNoteContent(l.title);if(c){let h=new RegExp(`${m}${F}${m}#+ ${_}(?:${g}|${w}).*$`,"gm");c=c==null?void 0:c.replace(h,"").replace(x,""),a=a.replace(new RegExp(Oe(l.link),"g"),`${m}${l.title}${m}${c}${m}`)}else console.warn(`Error fetching linked note content for: ${l.link}`)}catch(c){console.error(c)}return a}));let n=t.map(Se),s=this.getFrontmatter(null,r,this.app);if(s.system_commands){let a=s.aiService===u?k:Ae;s.system_commands.forEach(i=>n.unshift({role:a,content:i}))}return{messages:t,messagesWithRole:n}}async createNewChatFromTemplate(e,r){let{chatFolder:t,chatTemplateFolder:n}=e;if(!t||!t.trim()){new E.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(await this.ensureFolderExists(t,Z)){if(!n||!n.trim()){new E.Notice("[ChatGPT MD] No chat template folder value found. Please set one in settings.");return}await this.ensureFolderExists(n,de)&&new W(this.app,e,r).open()}}getDate(e,r=D){let t=e.getFullYear(),n=e.getMonth()+1,s=e.getDate(),a=e.getHours(),i=e.getMinutes(),l=e.getSeconds(),c=n.toString().padStart(2,"0"),h=s.toString().padStart(2,"0"),I=a.toString().padStart(2,"0"),y=i.toString().padStart(2,"0"),O=l.toString().padStart(2,"0");return r.replace("YYYY",t.toString()).replace("MM",c).replace("DD",h).replace("hh",I).replace("mm",y).replace("ss",O)}getFrontmatter(e,r,t){var h,I,y,O,$;let n=(e==null?void 0:e.file)||t.workspace.getActiveFile();if(!n)throw new Error("No active file found");let s=ye(r.defaultChatFrontmatter),a=((h=t.metadataCache.getFileCache(n))==null?void 0:h.frontmatter)||{},i={...s,...a};a.url||delete i.url;let l=xe(i.url,i.model),c=l==u?p:J;return{...c,...i,model:i.model.split("@")[1]||i.model,aiService:l,stream:(y=(I=i.stream)!=null?I:r.stream)!=null?y:c.stream,title:($=(O=e==null?void 0:e.file)==null?void 0:O.basename)!=null?$:c.title}}getHeadingPrefix(e){return e===Te?"":e>Q?"#".repeat(Q)+" ":"#".repeat(e)+" "}async processResponse(e,r,t){if(r.mode==="streaming"){let n=N(this.getHeadingPrefix(t.headingLevel),g);e.replaceRange(n,e.getCursor());let s=e.getCursor(),a={line:s.line,ch:s.ch+n.length};e.setCursor(a)}else{let n=r;H(n)&&(n=n+"\n```"),this.appendMessage(e,n,t.headingLevel)}}};var q=class extends C.Plugin{async onload(){this.statusBarItemEl=this.addStatusBarItem(),this.streamManager=new V,this.editorService=new j(this.app),this.settings=await Object.assign({},Ne,await this.loadData()),this.addCommand({id:ae,name:"Chat",icon:"message-circle",editorCallback:async(e,r)=>{var n;let t=this.editorService.getFrontmatter(r,this.settings,this.app);this.aiService=re(this.streamManager,t.aiService);try{let{messagesWithRole:s,messages:a}=await this.editorService.getMessagesFromEditor(e,this.settings);this.settings.generateAtCursor||this.editorService.moveCursorToEnd(e),C.Platform.isMobile?new C.Notice(`[ChatGPT MD] Calling ${t.model}`):this.updateStatusBar(`Calling ${t.model}`);let i=await this.aiService.callAIAPI(s,t,this.editorService.getHeadingPrefix(this.settings.headingLevel),e,this.settings.generateAtCursor,this.settings.apiKey);await this.editorService.processResponse(e,i,this.settings),this.settings.autoInferTitle&&Ie((n=r==null?void 0:r.file)==null?void 0:n.basename,this.settings.dateFormat)&&s.length>_e&&await this.aiService.inferTitle(r,t,a,this.editorService)}catch(s){C.Platform.isMobile&&new C.Notice(`[ChatGPT MD] Calling ${t.model}. `+s,9e3),console.log(s)}this.updateStatusBar("")}}),this.addCommand({id:se,name:"Add divider",icon:"minus",editorCallback:(e,r)=>{this.editorService.addHorizontalRule(e,g,this.settings.headingLevel)}}),this.addCommand({id:ne,name:"Add comment block",icon:"comment",editorCallback:(e,r)=>{let t=e.getCursor(),n=t.line,s=t.ch,a=`${Ee}${m}${Ce}`;e.replaceRange(a,t);let i={line:n+1,ch:s};e.setCursor(i)}}),this.addCommand({id:oe,name:"Stop streaming",icon:"octagon",callback:()=>{this.streamManager.stopStreaming()}}),this.addCommand({id:le,name:"Infer title",icon:"subtitles",editorCallback:async(e,r)=>{let t=this.editorService.getFrontmatter(r,this.settings,this.app);this.aiService=re(this.streamManager,t.aiService),this.updateStatusBar(`Calling ${t.model}`);let{messages:n}=await this.editorService.getMessagesFromEditor(e,this.settings);await this.aiService.inferTitle(r,this.settings,n,this.editorService),this.updateStatusBar("")}}),this.addCommand({id:ie,name:"Create new chat with highlighted text",icon:"highlighter",editorCallback:async(e,r)=>{try{await this.editorService.createNewChatWithHighlightedText(e,this.settings)}catch(t){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",t),new C.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}}),this.addCommand({id:ce,name:"Create new chat from template",icon:"layout-template",callback:async()=>{this.settings.dateFormat&&await this.editorService.createNewChatFromTemplate(this.settings,this.editorService.getDate(new Date,this.settings.dateFormat)),new C.Notice("date format cannot be empty in your ChatGPT MD settings. You can choose something like YYYYMMDDhhmmss")}}),this.addCommand({id:me,name:"Clear chat (except frontmatter)",icon:"trash",editorCallback:async(e,r)=>{this.editorService.clearChat(e)}}),this.addSettingTab(new B(this.app,this))}async saveSettings(){await this.saveData(this.settings)}updateStatusBar(e){this.statusBarItemEl.setText(`[ChatGPT MD] ${e}`)}};

/* nosourcemap */